# **********************************************************************
#
# Copyright (c) 2003-2015 ZeroC, Inc. All rights reserved.
#
# This copy of Ice is licensed to you under the terms described in the
# ICE_LICENSE file included in this distribution.
#
# **********************************************************************
#
# Ice version 3.6.1
#
# <auto-generated>
#
# Generated from file `base.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

import Ice, IcePy
import exceptions_ice

# Included module Base
_M_Base = Ice.openModule('Base')

# Start of module Base
__name__ = 'Base'

if 'TBaseEntity' not in _M_Base.__dict__:
    _M_Base.TBaseEntity = Ice.createTempClass()
    class TBaseEntity(Ice.Object):
        def __init__(self, id=0, isValid=True, updateTime=0, createTime=0):
            self.id = id
            self.isValid = isValid
            self.updateTime = updateTime
            self.createTime = createTime

        def ice_ids(self, current=None):
            return ('::Base::TBaseEntity', '::Ice::Object')

        def ice_id(self, current=None):
            return '::Base::TBaseEntity'

        def ice_staticId():
            return '::Base::TBaseEntity'
        ice_staticId = staticmethod(ice_staticId)

        def __str__(self):
            return IcePy.stringify(self, _M_Base._t_TBaseEntity)

        __repr__ = __str__

    _M_Base.TBaseEntityPrx = Ice.createTempClass()
    class TBaseEntityPrx(Ice.ObjectPrx):

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_Base.TBaseEntityPrx.ice_checkedCast(proxy, '::Base::TBaseEntity', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_Base.TBaseEntityPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

        def ice_staticId():
            return '::Base::TBaseEntity'
        ice_staticId = staticmethod(ice_staticId)

    _M_Base._t_TBaseEntityPrx = IcePy.defineProxy('::Base::TBaseEntity', TBaseEntityPrx)

    _M_Base._t_TBaseEntity = IcePy.defineClass('::Base::TBaseEntity', TBaseEntity, -1, (), False, False, None, (), (
        ('id', (), IcePy._t_long, False, 0),
        ('isValid', (), IcePy._t_bool, False, 0),
        ('updateTime', (), IcePy._t_long, False, 0),
        ('createTime', (), IcePy._t_long, False, 0)
    ))
    TBaseEntity._ice_type = _M_Base._t_TBaseEntity

    _M_Base.TBaseEntity = TBaseEntity
    del TBaseEntity

    _M_Base.TBaseEntityPrx = TBaseEntityPrx
    del TBaseEntityPrx

if '_t_EntityList' not in _M_Base.__dict__:
    _M_Base._t_EntityList = IcePy.defineSequence('::Base::EntityList', (), _M_Base._t_TBaseEntity)

if 'QueryResult' not in _M_Base.__dict__:
    _M_Base.QueryResult = Ice.createTempClass()
    class QueryResult(Ice.Object):
        def __init__(self, total=0, offset=0, result=None):
            self.total = total
            self.offset = offset
            self.result = result

        def ice_ids(self, current=None):
            return ('::Base::QueryResult', '::Ice::Object')

        def ice_id(self, current=None):
            return '::Base::QueryResult'

        def ice_staticId():
            return '::Base::QueryResult'
        ice_staticId = staticmethod(ice_staticId)

        def __str__(self):
            return IcePy.stringify(self, _M_Base._t_QueryResult)

        __repr__ = __str__

    _M_Base.QueryResultPrx = Ice.createTempClass()
    class QueryResultPrx(Ice.ObjectPrx):

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_Base.QueryResultPrx.ice_checkedCast(proxy, '::Base::QueryResult', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_Base.QueryResultPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

        def ice_staticId():
            return '::Base::QueryResult'
        ice_staticId = staticmethod(ice_staticId)

    _M_Base._t_QueryResultPrx = IcePy.defineProxy('::Base::QueryResult', QueryResultPrx)

    _M_Base._t_QueryResult = IcePy.declareClass('::Base::QueryResult')

    _M_Base._t_QueryResult = IcePy.defineClass('::Base::QueryResult', QueryResult, -1, (), False, False, None, (), (
        ('total', (), IcePy._t_int, False, 0),
        ('offset', (), IcePy._t_int, False, 0),
        ('result', (), _M_Base._t_EntityList, False, 0)
    ))
    QueryResult._ice_type = _M_Base._t_QueryResult

    _M_Base.QueryResult = QueryResult
    del QueryResult

    _M_Base.QueryResultPrx = QueryResultPrx
    del QueryResultPrx

if 'BaseService' not in _M_Base.__dict__:
    _M_Base.BaseService = Ice.createTempClass()
    class BaseService(Ice.Object):
        def __init__(self):
            if Ice.getType(self) == _M_Base.BaseService:
                raise RuntimeError('Base.BaseService is an abstract class')

        def ice_ids(self, current=None):
            return ('::Base::BaseService', '::Ice::Object')

        def ice_id(self, current=None):
            return '::Base::BaseService'

        def ice_staticId():
            return '::Base::BaseService'
        ice_staticId = staticmethod(ice_staticId)

        def query(self, T, queryString, current=None):
            pass

        def batchUpdate(self, T, filterString, updateString, current=None):
            pass

        def getById(self, T, id, current=None):
            pass

        def getOneByFilter(self, T, filterString, current=None):
            pass

        def deleteById(self, T, id, current=None):
            pass

        def updateById(self, entity, current=None):
            pass

        def create(self, entity, current=None):
            pass

        def __str__(self):
            return IcePy.stringify(self, _M_Base._t_BaseService)

        __repr__ = __str__

    _M_Base.BaseServicePrx = Ice.createTempClass()
    class BaseServicePrx(Ice.ObjectPrx):

        def query(self, T, queryString, _ctx=None):
            return _M_Base.BaseService._op_query.invoke(self, ((T, queryString), _ctx))

        def begin_query(self, T, queryString, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Base.BaseService._op_query.begin(self, ((T, queryString), _response, _ex, _sent, _ctx))

        def end_query(self, _r):
            return _M_Base.BaseService._op_query.end(self, _r)

        def batchUpdate(self, T, filterString, updateString, _ctx=None):
            return _M_Base.BaseService._op_batchUpdate.invoke(self, ((T, filterString, updateString), _ctx))

        def begin_batchUpdate(self, T, filterString, updateString, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Base.BaseService._op_batchUpdate.begin(self, ((T, filterString, updateString), _response, _ex, _sent, _ctx))

        def end_batchUpdate(self, _r):
            return _M_Base.BaseService._op_batchUpdate.end(self, _r)

        def getById(self, T, id, _ctx=None):
            return _M_Base.BaseService._op_getById.invoke(self, ((T, id), _ctx))

        def begin_getById(self, T, id, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Base.BaseService._op_getById.begin(self, ((T, id), _response, _ex, _sent, _ctx))

        def end_getById(self, _r):
            return _M_Base.BaseService._op_getById.end(self, _r)

        def getOneByFilter(self, T, filterString, _ctx=None):
            return _M_Base.BaseService._op_getOneByFilter.invoke(self, ((T, filterString), _ctx))

        def begin_getOneByFilter(self, T, filterString, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Base.BaseService._op_getOneByFilter.begin(self, ((T, filterString), _response, _ex, _sent, _ctx))

        def end_getOneByFilter(self, _r):
            return _M_Base.BaseService._op_getOneByFilter.end(self, _r)

        def deleteById(self, T, id, _ctx=None):
            return _M_Base.BaseService._op_deleteById.invoke(self, ((T, id), _ctx))

        def begin_deleteById(self, T, id, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Base.BaseService._op_deleteById.begin(self, ((T, id), _response, _ex, _sent, _ctx))

        def end_deleteById(self, _r):
            return _M_Base.BaseService._op_deleteById.end(self, _r)

        def updateById(self, entity, _ctx=None):
            return _M_Base.BaseService._op_updateById.invoke(self, ((entity, ), _ctx))

        def begin_updateById(self, entity, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Base.BaseService._op_updateById.begin(self, ((entity, ), _response, _ex, _sent, _ctx))

        def end_updateById(self, _r):
            return _M_Base.BaseService._op_updateById.end(self, _r)

        def create(self, entity, _ctx=None):
            return _M_Base.BaseService._op_create.invoke(self, ((entity, ), _ctx))

        def begin_create(self, entity, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Base.BaseService._op_create.begin(self, ((entity, ), _response, _ex, _sent, _ctx))

        def end_create(self, _r):
            return _M_Base.BaseService._op_create.end(self, _r)

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_Base.BaseServicePrx.ice_checkedCast(proxy, '::Base::BaseService', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_Base.BaseServicePrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

        def ice_staticId():
            return '::Base::BaseService'
        ice_staticId = staticmethod(ice_staticId)

    _M_Base._t_BaseServicePrx = IcePy.defineProxy('::Base::BaseService', BaseServicePrx)

    _M_Base._t_BaseService = IcePy.defineClass('::Base::BaseService', BaseService, -1, (), True, False, None, (), ())
    BaseService._ice_type = _M_Base._t_BaseService

    BaseService._op_query = IcePy.Operation('query', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Base._t_TBaseEntity, False, 0), ((), IcePy._t_string, False, 0)), (), ((), _M_Base._t_QueryResult, False, 0), (_M_Base._t_BaseException,))
    BaseService._op_batchUpdate = IcePy.Operation('batchUpdate', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Base._t_TBaseEntity, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0)), (), ((), _M_Base._t_QueryResult, False, 0), (_M_Base._t_BaseException,))
    BaseService._op_getById = IcePy.Operation('getById', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Base._t_TBaseEntity, False, 0), ((), IcePy._t_long, False, 0)), (), ((), _M_Base._t_TBaseEntity, False, 0), (_M_Base._t_BaseException,))
    BaseService._op_getOneByFilter = IcePy.Operation('getOneByFilter', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Base._t_TBaseEntity, False, 0), ((), IcePy._t_string, False, 0)), (), ((), _M_Base._t_TBaseEntity, False, 0), (_M_Base._t_BaseException,))
    BaseService._op_deleteById = IcePy.Operation('deleteById', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Base._t_TBaseEntity, False, 0), ((), IcePy._t_long, False, 0)), (), None, (_M_Base._t_BaseException,))
    BaseService._op_updateById = IcePy.Operation('updateById', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Base._t_TBaseEntity, False, 0),), (), ((), _M_Base._t_TBaseEntity, False, 0), (_M_Base._t_BaseException,))
    BaseService._op_create = IcePy.Operation('create', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Base._t_TBaseEntity, False, 0),), (), ((), _M_Base._t_TBaseEntity, False, 0), (_M_Base._t_BaseException,))

    _M_Base.BaseService = BaseService
    del BaseService

    _M_Base.BaseServicePrx = BaseServicePrx
    del BaseServicePrx

# End of module Base
