# **********************************************************************
#
# Copyright (c) 2003-2015 ZeroC, Inc. All rights reserved.
#
# This copy of Ice is licensed to you under the terms described in the
# ICE_LICENSE file included in this distribution.
#
# **********************************************************************
#
# Ice version 3.6.1
#
# <auto-generated>
#
# Generated from file `simple.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

import Ice, IcePy
import base_ice

# Included module Base
_M_Base = Ice.openModule('Base')

# Start of module SimpleService
_M_SimpleService = Ice.openModule('SimpleService')
__name__ = 'SimpleService'

if 'Simple' not in _M_SimpleService.__dict__:
    _M_SimpleService.Simple = Ice.createTempClass()
    class Simple(_M_Base.BaseService):
        def __init__(self):
            if Ice.getType(self) == _M_SimpleService.Simple:
                raise RuntimeError('SimpleService.Simple is an abstract class')

        def ice_ids(self, current=None):
            return ('::Base::BaseService', '::Ice::Object', '::SimpleService::Simple')

        def ice_id(self, current=None):
            return '::SimpleService::Simple'

        def ice_staticId():
            return '::SimpleService::Simple'
        ice_staticId = staticmethod(ice_staticId)

        def __str__(self):
            return IcePy.stringify(self, _M_SimpleService._t_Simple)

        __repr__ = __str__

    _M_SimpleService.SimplePrx = Ice.createTempClass()
    class SimplePrx(_M_Base.BaseServicePrx):

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_SimpleService.SimplePrx.ice_checkedCast(proxy, '::SimpleService::Simple', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_SimpleService.SimplePrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

        def ice_staticId():
            return '::SimpleService::Simple'
        ice_staticId = staticmethod(ice_staticId)

    _M_SimpleService._t_SimplePrx = IcePy.defineProxy('::SimpleService::Simple', SimplePrx)

    _M_SimpleService._t_Simple = IcePy.defineClass('::SimpleService::Simple', Simple, -1, (), True, False, None, (_M_Base._t_BaseService,), ())
    Simple._ice_type = _M_SimpleService._t_Simple

    _M_SimpleService.Simple = Simple
    del Simple

    _M_SimpleService.SimplePrx = SimplePrx
    del SimplePrx

# End of module SimpleService
